{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _defineProperty from \"D:/horizon/admin2/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"D:/horizon/admin2/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/horizon/admin2/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { IntlProvider, FormattedMessage } from 'react-intl';\nimport Button from 'components/common/Button';\nimport '@fontsource/inter/400.css';\nimport '@fontsource/inter/600.css';\nimport { Formik, Form, Field } from 'formik';\nimport FormLayout, { FormButtons, FormError, FormMessage, FormRow } from 'components/layout/FormLayout';\nimport usePost from 'hooks/usePost';\nimport loginStyles from './CForm.module.css';\n\nvar validate = function validate(_ref) {\n  var name = _ref.name;\n  var errors = {};\n\n  if (!name) {\n    errors.name = /*#__PURE__*/_jsx(FormattedMessage, {\n      id: \"label.required\",\n      defaultMessage: \"Required\"\n    });\n  }\n\n  return errors;\n};\n\nexport default function CSectionForm(_ref2) {\n  var formFields = _ref2.formFields,\n      formFieldsType = _ref2.formFieldsType,\n      initValues = _ref2.initValues,\n      values = _ref2.values,\n      postLink = _ref2.postLink,\n      onSave = _ref2.onSave,\n      onClose = _ref2.onClose;\n  // const [name, setName] = useState();\n  var post = usePost();\n\n  var _useState = useState(),\n      message = _useState[0],\n      setMessage = _useState[1];\n\n  var initialValues = initValues;\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n      var ok;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log('Submit: ', values);\n              ok = true; // const { ok, data } = await post(postLink, values);\n\n              if (ok) {\n                onSave();\n              } else {\n                setMessage(data || /*#__PURE__*/_jsx(FormattedMessage, {\n                  id: \"message.failure\",\n                  defaultMessage: \"Something went wrong.\"\n                }));\n              }\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsx(FormLayout, {\n    className: loginStyles.login,\n    children: /*#__PURE__*/_jsx(Formik, {\n      initialValues: _objectSpread(_objectSpread({}, initialValues), values),\n      onSubmit: handleSubmit,\n      children: function children() {\n        return /*#__PURE__*/_jsxs(Form, {\n          children: [formFields.map(function (field, index) {\n            return /*#__PURE__*/_jsxs(FormRow, {\n              children: [/*#__PURE__*/_jsx(\"label\", {\n                htmlFor: \"\".concat(field),\n                children: /*#__PURE__*/_jsx(FormattedMessage, {\n                  id: \"label.\".concat(field),\n                  defaultMessage: \"\".concat(field)\n                })\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                children: [/*#__PURE__*/_jsx(Field, {\n                  name: \"\".concat(field),\n                  type: \"\".concat(formFieldsType[index][1]),\n                  as: \"\".concat(formFieldsType[index][2])\n                }), /*#__PURE__*/_jsx(FormError, {\n                  name: \"\".concat(field)\n                })]\n              })]\n            });\n          }), /*#__PURE__*/_jsxs(FormButtons, {\n            children: [/*#__PURE__*/_jsx(Button, {\n              type: \"submit\",\n              variant: \"action\",\n              children: /*#__PURE__*/_jsx(FormattedMessage, {\n                id: \"label.submit\",\n                defaultMessage: \"Submit\"\n              })\n            }), /*#__PURE__*/_jsx(Button, {\n              onClick: onClose,\n              children: /*#__PURE__*/_jsx(FormattedMessage, {\n                id: \"label.cancel\",\n                defaultMessage: \"Cancel\"\n              })\n            })]\n          }), /*#__PURE__*/_jsx(FormMessage, {\n            children: message\n          })]\n        });\n      }\n    })\n  });\n} // =================================================================\n// Conditional Form\n// {formFields.map(field => {\n//   if (field[1] === \"text\") {\n//     <FormRow>\n//       <label htmlFor={`${field[0]}`}>\n//         <FormattedMessage id={`label.${field[0]}`} defaultMessage={`${field[0]}`} />\n//       </label>\n//       <div>\n//         <Field\n//           name={`${field[0]}`}\n//           type=\"text\"\n//         />\n//         <FormError name={`${field[0]}`} />\n//       </div>\n//     </FormRow>\n//   } else if (field[1] === \"number\") {\n//     <FormRow>\n//       <label htmlFor={`${field[0]}`}>\n//         <FormattedMessage id={`label.${field[0]}`} defaultMessage={`${field[0]}`} />\n//       </label>\n//       <div>\n//         <Field\n//           name={`${field[0]}`}\n//           type=\"number\"\n//         />\n//         <FormError name={`${field[0]}`} />\n//       </div>\n//     </FormRow>\n//   } else if (field[1] === \"textarea\") {\n//     <FormRow>\n//       <label htmlFor={`${field[0]}`}>\n//         <FormattedMessage id={`label.${field[0]}`} defaultMessage={`${field[0]}`} />\n//       </label>\n//       <div>\n//         <Field\n//           name={`${field[0]}`}\n//           type=\"textarea\"\n//         />\n//         <FormError name={`${field[0]}`} />\n//       </div>\n//     </FormRow>\n//   } else if (field[1] === \"checkbox\") {\n//     <FormRow>\n//       <label />\n//       <Field name={`${field}`}>\n//         {\n//           // ({ field }) => (\n//           <Checkbox\n//             // {...field}\n//             label={\n//               <FormattedMessage\n//                 id={`label.${field}`}\n//                 defaultMessage={`${field}`}\n//               />\n//             }\n//           />\n//           // )\n//         }\n//       </Field>\n//     </FormRow>\n//   }\n// }\n// )}\n// ===========================================================\n// styled checkbox\n\n{\n  /* <a\r\n  className=\"show_design_link\"\r\n  href=\"#\"\r\n  role=\"button\"\r\n  >\r\n  <label className=\"show_design\">\r\n    <input\r\n      className=\"label__checkbox\"\r\n      id=\"show_design\"\r\n      name=\"show_design\"\r\n      type=\"checkbox\"\r\n      checked={false}\r\n      readOnly\r\n    />\r\n    <span className=\"label__text\">\r\n      <span className=\"label__check\">\r\n        <i className=\"fa fa-check icon\"></i>\r\n      </span>\r\n    </span>\r\n    <label className=\"show_design_label\" htmlFor=\"show_design\">\r\n      Show Lenses Design\r\n    </label>\r\n  </label>\r\n  </a> */\n}","map":null,"metadata":{},"sourceType":"module"}